// Generated by LiveScript 1.2.0
(function(){
  var fs, ref$, tail, lines, compact, fold, words, map, parseLine, parseInput, inputToInfo, mergeEvents, collectEvent, collectEvents, fillAverage, makeAverages, collectStats, inputPath;
  fs = require('fs');
  ref$ = require('prelude-ls'), tail = ref$.tail, lines = ref$.lines, compact = ref$.compact, fold = ref$.fold, words = ref$.words, map = ref$.map;
  parseLine = function(event){
    var ref$, visitor, room, type, minutes;
    ref$ = words(event), visitor = ref$[0], room = ref$[1], type = ref$[2], minutes = ref$[3];
    return {
      room: +room,
      visitor: +visitor,
      minutes: type === "O"
        ? +minutes + 1
        : -minutes,
      visitors: type === "O" ? 1 : 0
    };
  };
  parseInput = function(){
    return compact(lines(tail(function(it){
      return it.toString();
    }.apply(this, arguments))));
  };
  inputToInfo = function(){
    return map(parseLine)(parseInput.apply(this, arguments));
  };
  mergeEvents = function(dest, event){
    var r1, m1, v1, r2, m2, v2;
    if (dest == null) {
      return event;
    }
    r1 = dest.room, m1 = dest.minutes, v1 = dest.visitors;
    r2 = event.room, m2 = event.minutes, v2 = event.visitors;
    return {
      room: r1,
      minutes: m1 + m2,
      visitors: v1 + v2
    };
  };
  collectEvent = function(stats, event){
    var room;
    room = event.room;
    stats[room] = mergeEvents(stats[room], event);
    return stats;
  };
  collectEvents = fold(collectEvent, []);
  fillAverage = function(stat){
    if (stat != null) {
      stat.avgMinutes = Math.floor(stat.minutes / stat.visitors);
    }
    return stat;
  };
  makeAverages = map(fillAverage);
  collectStats = function(){
    return makeAverages(collectEvents.apply(this, arguments));
  };
  console.log('\n');
  inputPath = process.argv[2];
  fs.readFile(inputPath, function(err, data){
    var stats, i$, len$, idx, room, results$ = [];
    if (err != null) {
      throw new Error('Could\'nt read file');
    }
    stats = collectStats(
    inputToInfo(
    data));
    for (i$ = 0, len$ = stats.length; i$ < len$; ++i$) {
      idx = i$;
      room = stats[i$];
      if (room) {
        results$.push(console.log("Room " + idx + ", " + room.avgMinutes + " minute average visit, " + room.visitors + " visitor(s) total"));
      }
    }
    return results$;
  });
}).call(this);
